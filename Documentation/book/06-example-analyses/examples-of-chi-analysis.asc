== Examples of chi analysis

We will now run some examples of chi analysis using the the *chi mapping tool*. 

WARNING: We are going to assume you are using our vagrant setup. That means that code will live in the directory `/LSDTopoTools/Git_projects/LSDTopoTool_ChiMudd2014` and topographic data will live in the directory `/LSDTopoTools/Topographic_projects`.

=== Get the example data

We have placed several example datasets in the github repository https://github.com/LSDtopotools/LSDTT_chi_examples[LSDTT_chi_examples]. You can clone these in your vagrant box into the `Topographic_projects` folder:

[source, console]
----
$ cd /LSDTopoTools/Topographic_projects
$ git clone https://github.com/LSDtopotools/LSDTT_chi_examples.git
----

=== First example: Basic DEM steps

First we will do some very basic extraction of basins and visualisation of a region near Xi'an China, in the mountains containing https://en.wikipedia.org/wiki/Mount_Hua[Hua Shan]. 

If you have followed the steps in the section: <<Getting the software>>, the *chi mapping tool* will already be installed, and the example driver file will be in the `LSDTT_chi_examples` folder. 

. Navigate to the directory with the *chi mapping tool*:
+
[source,console]
----
$ cd /LSDTopoTools/Git_projects/LSDTopoTool_ChiMudd2014/driver_functions_MuddChi2014/
----
+
. Now run the example driver file. 
+
[source,console]
----
$ ./chi_mapping_tool.exe /LSDTopoTools/Topographic_projects/LSDTT_chi_examples Xian_example1.driver
----
+
In every *LSDTopoTools* analysis in these examples, there are three inputs: i) the name of the program (`./chi_mapping_tool.exe`) ii) the directory of the data (`/LSDTopoTools/Topographic_projects/LSDTT_chi_examples`) and iii) the name of the driver file (`Xian_example1.driver`). The extension of the driver file doesn't matter, you could call it `Xian_example1.rhinocerous` if you wanted.
+
. The important elements of the driver file are:
+
.. `test_drainage_boundaries: true` This is actually the default. We put it in the parameter file here to highlight its importance. The chi coordinate is calculated integrating drainage area along the channel so if your basin is truncated by the edge of the DEM it means that *your chi coordinate will be incorrect*. 
+
.. `write hillshade: true`. Does what is says on the tin. It means that you will print a hillshade raster. You really need to do this the first time you analyse a DEM (but you only need to do it once). The reason is that all your figures will look much nicer with a hillshade! 
+
. We are going to visualise the output using python. 
+
. In your host operating system, find the directory that contains the https://github.com/LSDtopotools/LSDMappingTools[LSDMappingTools] directory.
+
. You might want to open spyder (see the section: <<Getting our plotting tools>> on how to get this) to look at the python script. To open spyder simply type `spyder` into a powershell window (Windows)  or terminal (Linux/MaxOS).

=== Some comments on basin selection

In the *chi mapping tool*, we have several ways to select basins. We feel the default method is best (`find_complete_basins_in_window`). The options are:

* `find_complete_basins_in_window`: This goes through several refining steps. If first checks every basin in the raster and selects basins within a size window between `minimum_basin_size_pixels` and `maximum_basin_size_pixels`. It then takes the resulting list of basins and removes any that are influenced by the edge of the DEM (to ensure drainage area of the basin is correct). Finally, it removes nested basins, so that in the end you have basins of approxamaitely the same size, not influenced by the edge of the DEM, and with no nested basins. 
* `find_largest_complete_basins`: This is a somewhat old version that takes all basins draining to edge and works upstream from their outlets to find the largest subbasin that is not influenced by the edge. To get this to work you *MUST ALSO* set `find_complete_basins_in_window: false`. 
* `test_drainage_boundaries`: If either `find_complete_basins_in_window` or `find_largest_complete_basins` are `true` then this is ignored. If not, then it eliminates any basin that is influenced by the edge of the DEM. 
* `BaselevelJunctions_file`: If this points to a file that includes a series of integers that refer to junction indices, it will load these indices. If the file doesn't contain a series of integers the most likely result is that it will crash! 



